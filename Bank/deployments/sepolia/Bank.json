{
  "address": "0x9111F9AE8240E57d9b2Cb24AD15AcCbA56390E28",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numborrowers",
          "type": "uint256"
        }
      ],
      "name": "Bank__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrowerAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "newAmount",
          "type": "uint256"
        }
      ],
      "name": "InterestAppliedOnBorrowedMoney",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "name": "Collateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Lend",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "Repayment",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountLended",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToBorrower",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateral",
              "type": "uint256"
            }
          ],
          "internalType": "struct Bank.Borrower",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getBorrower",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getLender",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToAmountLended",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "s_addressToBorrower",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_borrowers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_lenders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x3465ee5a5b1abd9586d0c2193b76ff358e6d4a7aa344d66501862cd303488d06",
  "receipt": {
    "to": null,
    "from": "0x5B1125D3c42d00706BD5Ea6a90EeB25a38B0EE15",
    "contractAddress": "0x9111F9AE8240E57d9b2Cb24AD15AcCbA56390E28",
    "transactionIndex": 32,
    "gasUsed": "1819572",
    "logsBloom": "0x
    "blockHash": "0x9c9a91b9860b6188b7d2af4a4cb651c6d0d6745dfa7fa69833c2f1082be91220",
    "transactionHash": "0x3465ee5a5b1abd9586d0c2193b76ff358e6d4a7aa344d66501862cd303488d06",
    "logs": [],
    "blockNumber": 4209205,
    "cumulativeGasUsed": "11949679",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "de0fa7baf54379f8163ffaba609cd31e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.19+commit.7dd6d404\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numborrowers\",\"type\":\"uint256\"}],\"name\":\"Bank__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrowerAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"newAmount\",\"type\":\"uint256\"}],\"name\":\"InterestAppliedOnBorrowedMoney\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"name\":\"Collateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Lend\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"Repayment\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountLended\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToBorrower\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"internalType\":\"struct Bank.Borrower\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getBorrower\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getLender\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToAmountLended\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"s_addressToBorrower\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_borrowers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_lenders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bank.sol\":\"Bank\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"contracts/Bank.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nerror Bank__UpkeepNotNeeded(uint256 currentBalance, uint256 numborrowers);\\n\\n\\ncontract Bank is  AutomationCompatibleInterface {\\nstruct Borrower {\\n    uint256 amount;\\n    uint256 timestamp;\\n    uint256 collateral;\\n}\\n\\n    mapping(address => uint256) public s_addressToAmountLended;\\n    mapping(address => Borrower) public s_addressToBorrower;\\n    address[] public s_lenders;\\n    address[] public s_borrowers;\\nuint256 private s_lastTimeStamp;\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    uint256 private immutable i_interval;\\n    uint256 private immutable i_interest_rate;\\n    uint256 public constant MINIMUM_USD = 0.005 * 10 ** 18;\\n\\n    event InterestAppliedOnBorrowedMoney(address indexed borrowerAddress, uint256 indexed newAmount);\\n\\n \\n\\n    constructor() {\\n        i_interest_rate = 1;\\n        i_interval=100000000000;\\n        s_lastTimeStamp =block.timestamp;\\n    }\\n\\n    function Lend() public payable {\\n        require(\\n            msg.value >= MINIMUM_USD,\\n            \\\"You need to spend more ETH!\\\"\\n        );\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountLended[msg.sender] += msg.value;\\n        s_lenders.push(msg.sender);\\n    }\\n\\n\\n    function Collateral(uint256 collateral) public {\\n        require(collateral>0,\\\"collateral needed\\\");\\n        s_addressToBorrower[msg.sender].collateral = collateral;\\n        if(s_addressToBorrower[msg.sender].timestamp==0){\\n        s_addressToBorrower[msg.sender].timestamp = block.timestamp;\\n        }\\n    }\\n    \\n    function Repayment() public payable {\\n        bool borroweExists = false;\\n              for (uint i = 0; i < s_borrowers.length; i++) {\\n        if (s_borrowers[i] == msg.sender) {\\n            borroweExists =  true;\\n        }\\n    }\\n\\n    \\n        require(borroweExists,\\\"You dont have anything to Repay\\\");\\n        require(s_addressToBorrower[msg.sender].amount!=0,\\\"You dont have anything to Repay\\\");\\n        require(s_addressToBorrower[msg.sender].amount>=msg.value);\\n        s_addressToBorrower[msg.sender].amount=s_addressToBorrower[msg.sender].amount - msg.value;\\n            for (uint i = 0; i < s_borrowers.length; i++) {\\n        if (s_borrowers[i] == msg.sender) {\\n            delete s_borrowers[i];\\n        }}\\n\\n    }\\n\\n\\n    function borrow(uint256 borrowAmount) public  {\\n        require(borrowAmount<address(this).balance,\\\"Contract Dont have that much money right now!\\\");\\n       require(borrowAmount+s_addressToBorrower[msg.sender].amount<((3*s_addressToBorrower[msg.sender].collateral)/2),\\\"You need more collateral to borrow more\\\");\\n        s_addressToBorrower[msg.sender].amount+=borrowAmount;\\n        s_borrowers.push(msg.sender);\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: borrowAmount\\n        }(\\\"\\\");\\n        if(!callSuccess){\\n            s_addressToBorrower[msg.sender].amount-=borrowAmount;\\n        }\\n        else{\\n\\n        }\\n    }\\n\\n    function withdraw() public {\\n\\n        uint256 amount;\\n        for (\\n            uint256 lendersIndex = 0;\\n            lendersIndex < s_lenders.length;\\n            lendersIndex++\\n        ) {\\n            if(s_lenders[uint(lendersIndex)]==msg.sender){\\n                amount =s_addressToAmountLended[msg.sender];\\n                s_addressToAmountLended[msg.sender]=0;\\n                break;\\n            }\\n        }\\n        // // transfer\\n        // payable(msg.sender).transfer(address(this).balance);\\n        // // send\\n        // bool sendSuccess = payable(msg.sender).send(address(this).balance);\\n        // require(sendSuccess, \\\"Send failed\\\");\\n        // call\\n        (bool callSuccess, ) = payable(msg.sender).call{\\n            value: amount\\n        }(\\\"\\\");\\n        if(!callSuccess){\\n            s_addressToAmountLended[msg.sender] = amount;\\n        }\\n        else{\\n\\n        amount = 0;\\n        }\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    // function CheaperWithdraw() public onlyOwner {\\n    //     address[] memory funders = s_lenders;\\n    //     for (\\n    //         uint256 funderIndex = 0;\\n    //         funderIndex < funders.length;\\n    //         funderIndex++\\n    //     ) {\\n    //         address funder = funders[funderIndex];\\n    //         s_addressToAmountLended[funder] = 0;\\n    //     }\\n    //     s_lenders = new address[](0);\\n    //     (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n    //     require(callSuccess, \\\"Call failed\\\");\\n    // }\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasBorrowers = s_borrowers.length > 0;\\n        upkeepNeeded = (timePassed && hasBorrowers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Bank__UpkeepNotNeeded(\\n                address(this).balance,\\n                s_borrowers.length\\n            );\\n        }\\n        for (uint i=0; i<s_borrowers.length; i++) {\\n    if (s_addressToBorrower[s_borrowers[uint(i)]].amount != 0 && (block.timestamp-s_addressToBorrower[s_borrowers[uint(i)]].timestamp)>(i_interval*365)) {\\n      s_addressToBorrower[s_borrowers[uint(i)]].amount += s_addressToBorrower[s_borrowers[uint(i)]].amount*i_interest_rate/100;\\n\\n\\n    emit InterestAppliedOnBorrowedMoney(s_borrowers[uint(i)],s_addressToBorrower[s_borrowers[uint(i)]].amount);\\n    }\\n  }\\n    }\\n\\n\\n    function getAddressToAmountLended(\\n        address funder\\n    ) public view returns (uint256) {\\n        return s_addressToAmountLended[funder];\\n    }\\n\\n    function getLender(uint256 index) public view returns (address) {\\n        return s_lenders[index];\\n    }\\n    function getAddressToBorrower(\\n        address funder\\n    ) public view returns ( Borrower memory) {\\n        return s_addressToBorrower[funder];\\n    }\\n\\n    function getBorrower(uint256 index) public view returns (address) {\\n        return s_borrowers[index];\\n    }\\n    function getInterval() public view returns (uint256){\\n        return i_interval;\\n    }\\n\\n    // Explainer from: https://solidity-by-example.org/fallback/\\n    // Ether is sent to contract\\n    //      is msg.data empty?\\n    //          /   \\\\\\n    //         yes  no\\n    //         /     \\\\\\n    //    receive()?  fallback()\\n    //     /   \\\\\\n    //   yes   no\\n    //  /        \\\\\\n    //receive()  fallback()\\n\\n    fallback() external payable {\\n    }\\n\\n    receive() external payable {\\n    }\\n}\\n\\n// Concepts we didn't cover yet (will cover in later sections)\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0xf262dd8909e4a334584d6b4bd827ee1285f0bb33e4e6a5a6703c7b6eef5513c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50600160a0818152505064174876e800608081815250504260048190555060805160a051611fab6100616000396000610a1b01526000818161095b015281816110b501526111a30152611fab6000f3fe6080604052600436106101025760003560e01c80636b69a5921161009557806391ad27b41161006457806391ad27b41461032457806399c6331a1461034f578063c5ebeaec1461038c578063de911f0c146103b5578063fa2c7f9b146103f257610109565b80636b69a592146102415780636e04ff0d1461026c5780636e8061f2146102aa5780638500d919146102e757610109565b80633ccfd60b116100d15780633ccfd60b146101ed5780634585e33b1461020457806353abe5cb1461022d5780635b0b62671461023757610109565b806309fdbad01461010b57806311e343121461013457806323b732871461017157806336c52682146101b057610109565b3661010957005b005b34801561011757600080fd5b50610132600480360381019061012d91906115bc565b61042f565b005b34801561014057600080fd5b5061015b60048036038101906101569190611647565b61054e565b60405161016891906116c5565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190611647565b6105c5565b6040516101a7939291906116ef565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d291906115bc565b6105ef565b6040516101e49190611735565b60405180910390f35b3480156101f957600080fd5b5061020261062e565b005b34801561021057600080fd5b5061022b600480360381019061022691906117b5565b610854565b005b610235610c81565b005b61023f610d85565b005b34801561024d57600080fd5b506102566110a2565b6040516102639190611802565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e919061195e565b6110ad565b6040516102a1929190611a41565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc9190611647565b61113f565b6040516102de9190611802565b60405180910390f35b3480156102f357600080fd5b5061030e600480360381019061030991906115bc565b611157565b60405161031b9190611735565b60405180910390f35b34801561033057600080fd5b5061033961119f565b6040516103469190611802565b60405180910390f35b34801561035b57600080fd5b5061037660048036038101906103719190611647565b6111c7565b6040516103839190611802565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae91906115bc565b61120f565b005b3480156103c157600080fd5b506103dc60048036038101906103d791906115bc565b6114ca565b6040516103e99190611735565b60405180910390f35b3480156103fe57600080fd5b50610419600480360381019061041491906115bc565b611509565b6040516104269190611735565b60405180910390f35b60008111610472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046990611ace565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361054b5742600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b50565b610556611551565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b600381815481106105ff57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b600280549050811015610751573373ffffffffffffffffffffffffffffffffffffffff166002828154811061066e5761066d611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361073e576000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610751565b808061074990611b4c565b915050610636565b5060003373ffffffffffffffffffffffffffffffffffffffff168260405161077890611bc5565b60006040518083038185875af1925050503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b505090508061080b57816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610810565b600091505b80610850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084790611c26565b60405180910390fd5b5050565b600061086e604051806020016040528060008152506110ad565b509050806108ba57476003805490506040517ff0950c390000000000000000000000000000000000000000000000000000000081526004016108b1929190611c46565b60405180910390fd5b60005b600380549050811015610c7b57600060016000600384815481106108e4576108e3611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414158015610a12575061016d7f00000000000000000000000000000000000000000000000000000000000000006109849190611c6f565b600160006003848154811061099c5761099b611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015442610a109190611cb1565b115b15610c685760647f00000000000000000000000000000000000000000000000000000000000000006001600060038581548110610a5257610a51611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ac59190611c6f565b610acf9190611d14565b6001600060038481548110610ae757610ae6611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610b5e9190611d45565b925050819055506001600060038381548110610b7d57610b7c611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460038281548110610bfa57610bf9611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167faf604cfd877df7a9b75fd7cc94f77bc694aefcde6be8ae5695c571167e3eab0460405160405180910390a35b8080610c7390611b4c565b9150506108bd565b50505050565b6611c37937e08000341015610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290611dc5565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d199190611d45565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000805b600380549050811015610e1f573373ffffffffffffffffffffffffffffffffffffffff1660038281548110610dc157610dc0611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e0c57600191505b8080610e1790611b4c565b915050610d89565b5080610e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5790611e31565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90611e31565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610f3457600080fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610f829190611cb1565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b60038054905081101561109e573373ffffffffffffffffffffffffffffffffffffffff166003828154811061100357611002611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361108b576003818154811061105d5761105c611aee565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061109690611b4c565b915050610fcb565b5050565b6611c37937e0800081565b6000606060007f0000000000000000000000000000000000000000000000000000000000000000600454426110e29190611cb1565b1190506000806003805490501190508180156110fb5750805b9350836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250935093505050915091565b60006020528060005260406000206000915090505481565b60006003828154811061116d5761116c611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b478110611251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124890611ec3565b60405180910390fd5b6002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015460036112a29190611c6f565b6112ac9190611d14565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154826112fa9190611d45565b1061133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190611f55565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461138c9190611d45565b925050819055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003373ffffffffffffffffffffffffffffffffffffffff168260405161141c90611bc5565b60006040518083038185875af1925050503d8060008114611459576040519150601f19603f3d011682016040523d82523d6000602084013e61145e565b606091505b50509050806114c55781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546114b99190611cb1565b925050819055506114c6565b5b5050565b600281815481106114da57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002828154811061151f5761151e611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61159981611586565b81146115a457600080fd5b50565b6000813590506115b681611590565b92915050565b6000602082840312156115d2576115d161157c565b5b60006115e0848285016115a7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611614826115e9565b9050919050565b61162481611609565b811461162f57600080fd5b50565b6000813590506116418161161b565b92915050565b60006020828403121561165d5761165c61157c565b5b600061166b84828501611632565b91505092915050565b61167d81611586565b82525050565b6060820160008201516116996000850182611674565b5060208201516116ac6020850182611674565b5060408201516116bf6040850182611674565b50505050565b60006060820190506116da6000830184611683565b92915050565b6116e981611586565b82525050565b600060608201905061170460008301866116e0565b61171160208301856116e0565b61171e60408301846116e0565b949350505050565b61172f81611609565b82525050565b600060208201905061174a6000830184611726565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261177557611774611750565b5b8235905067ffffffffffffffff81111561179257611791611755565b5b6020830191508360018202830111156117ae576117ad61175a565b5b9250929050565b600080602083850312156117cc576117cb61157c565b5b600083013567ffffffffffffffff8111156117ea576117e9611581565b5b6117f68582860161175f565b92509250509250929050565b600060208201905061181760008301846116e0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61186b82611822565b810181811067ffffffffffffffff8211171561188a57611889611833565b5b80604052505050565b600061189d611572565b90506118a98282611862565b919050565b600067ffffffffffffffff8211156118c9576118c8611833565b5b6118d282611822565b9050602081019050919050565b82818337600083830152505050565b60006119016118fc846118ae565b611893565b90508281526020810184848401111561191d5761191c61181d565b5b6119288482856118df565b509392505050565b600082601f83011261194557611944611750565b5b81356119558482602086016118ee565b91505092915050565b6000602082840312156119745761197361157c565b5b600082013567ffffffffffffffff81111561199257611991611581565b5b61199e84828501611930565b91505092915050565b60008115159050919050565b6119bc816119a7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119fc5780820151818401526020810190506119e1565b60008484015250505050565b6000611a13826119c2565b611a1d81856119cd565b9350611a2d8185602086016119de565b611a3681611822565b840191505092915050565b6000604082019050611a5660008301856119b3565b8181036020830152611a688184611a08565b90509392505050565b600082825260208201905092915050565b7f636f6c6c61746572616c206e6565646564000000000000000000000000000000600082015250565b6000611ab8601183611a71565b9150611ac382611a82565b602082019050919050565b60006020820190508181036000830152611ae781611aab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b5782611586565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b8957611b88611b1d565b5b600182019050919050565b600081905092915050565b50565b6000611baf600083611b94565b9150611bba82611b9f565b600082019050919050565b6000611bd082611ba2565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611c10600b83611a71565b9150611c1b82611bda565b602082019050919050565b60006020820190508181036000830152611c3f81611c03565b9050919050565b6000604082019050611c5b60008301856116e0565b611c6860208301846116e0565b9392505050565b6000611c7a82611586565b9150611c8583611586565b9250828202611c9381611586565b91508282048414831517611caa57611ca9611b1d565b5b5092915050565b6000611cbc82611586565b9150611cc783611586565b9250828203905081811115611cdf57611cde611b1d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d1f82611586565b9150611d2a83611586565b925082611d3a57611d39611ce5565b5b828204905092915050565b6000611d5082611586565b9150611d5b83611586565b9250828201905080821115611d7357611d72611b1d565b5b92915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000611daf601b83611a71565b9150611dba82611d79565b602082019050919050565b60006020820190508181036000830152611dde81611da2565b9050919050565b7f596f7520646f6e74206861766520616e797468696e6720746f20526570617900600082015250565b6000611e1b601f83611a71565b9150611e2682611de5565b602082019050919050565b60006020820190508181036000830152611e4a81611e0e565b9050919050565b7f436f6e747261637420446f6e7420686176652074686174206d756368206d6f6e60008201527f6579207269676874206e6f772100000000000000000000000000000000000000602082015250565b6000611ead602d83611a71565b9150611eb882611e51565b604082019050919050565b60006020820190508181036000830152611edc81611ea0565b9050919050565b7f596f75206e656564206d6f726520636f6c6c61746572616c20746f20626f727260008201527f6f77206d6f726500000000000000000000000000000000000000000000000000602082015250565b6000611f3f602783611a71565b9150611f4a82611ee3565b604082019050919050565b60006020820190508181036000830152611f6e81611f32565b905091905056fea2646970667358221220ef2c03bf116e998ba49cadea70c13a52fac73dfc0e8df7b6993df523304feed264736f6c63430008130033",
  "deployedBytecode": "0x6080604052600436106101025760003560e01c80636b69a5921161009557806391ad27b41161006457806391ad27b41461032457806399c6331a1461034f578063c5ebeaec1461038c578063de911f0c146103b5578063fa2c7f9b146103f257610109565b80636b69a592146102415780636e04ff0d1461026c5780636e8061f2146102aa5780638500d919146102e757610109565b80633ccfd60b116100d15780633ccfd60b146101ed5780634585e33b1461020457806353abe5cb1461022d5780635b0b62671461023757610109565b806309fdbad01461010b57806311e343121461013457806323b732871461017157806336c52682146101b057610109565b3661010957005b005b34801561011757600080fd5b50610132600480360381019061012d91906115bc565b61042f565b005b34801561014057600080fd5b5061015b60048036038101906101569190611647565b61054e565b60405161016891906116c5565b60405180910390f35b34801561017d57600080fd5b5061019860048036038101906101939190611647565b6105c5565b6040516101a7939291906116ef565b60405180910390f35b3480156101bc57600080fd5b506101d760048036038101906101d291906115bc565b6105ef565b6040516101e49190611735565b60405180910390f35b3480156101f957600080fd5b5061020261062e565b005b34801561021057600080fd5b5061022b600480360381019061022691906117b5565b610854565b005b610235610c81565b005b61023f610d85565b005b34801561024d57600080fd5b506102566110a2565b6040516102639190611802565b60405180910390f35b34801561027857600080fd5b50610293600480360381019061028e919061195e565b6110ad565b6040516102a1929190611a41565b60405180910390f35b3480156102b657600080fd5b506102d160048036038101906102cc9190611647565b61113f565b6040516102de9190611802565b60405180910390f35b3480156102f357600080fd5b5061030e600480360381019061030991906115bc565b611157565b60405161031b9190611735565b60405180910390f35b34801561033057600080fd5b5061033961119f565b6040516103469190611802565b60405180910390f35b34801561035b57600080fd5b5061037660048036038101906103719190611647565b6111c7565b6040516103839190611802565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae91906115bc565b61120f565b005b3480156103c157600080fd5b506103dc60048036038101906103d791906115bc565b6114ca565b6040516103e99190611735565b60405180910390f35b3480156103fe57600080fd5b50610419600480360381019061041491906115bc565b611509565b6040516104269190611735565b60405180910390f35b60008111610472576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046990611ace565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600201819055506000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101540361054b5742600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101819055505b50565b610556611551565b600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060405180606001604052908160008201548152602001600182015481526020016002820154815250509050919050565b60016020528060005260406000206000915090508060000154908060010154908060020154905083565b600381815481106105ff57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080600090505b600280549050811015610751573373ffffffffffffffffffffffffffffffffffffffff166002828154811061066e5761066d611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361073e576000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054915060008060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610751565b808061074990611b4c565b915050610636565b5060003373ffffffffffffffffffffffffffffffffffffffff168260405161077890611bc5565b60006040518083038185875af1925050503d80600081146107b5576040519150601f19603f3d011682016040523d82523d6000602084013e6107ba565b606091505b505090508061080b57816000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550610810565b600091505b80610850576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161084790611c26565b60405180910390fd5b5050565b600061086e604051806020016040528060008152506110ad565b509050806108ba57476003805490506040517ff0950c390000000000000000000000000000000000000000000000000000000081526004016108b1929190611c46565b60405180910390fd5b60005b600380549050811015610c7b57600060016000600384815481106108e4576108e3611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414158015610a12575061016d7f00000000000000000000000000000000000000000000000000000000000000006109849190611c6f565b600160006003848154811061099c5761099b611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015442610a109190611cb1565b115b15610c685760647f00000000000000000000000000000000000000000000000000000000000000006001600060038581548110610a5257610a51611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610ac59190611c6f565b610acf9190611d14565b6001600060038481548110610ae757610ae6611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000016000828254610b5e9190611d45565b925050819055506001600060038381548110610b7d57610b7c611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015460038281548110610bfa57610bf9611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167faf604cfd877df7a9b75fd7cc94f77bc694aefcde6be8ae5695c571167e3eab0460405160405180910390a35b8080610c7390611b4c565b9150506108bd565b50505050565b6611c37937e08000341015610ccb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610cc290611dc5565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610d199190611d45565b925050819055506002339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000805b600380549050811015610e1f573373ffffffffffffffffffffffffffffffffffffffff1660038281548110610dc157610dc0611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610e0c57600191505b8080610e1790611b4c565b915050610d89565b5080610e60576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e5790611e31565b60405180910390fd5b6000600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015403610ee5576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610edc90611e31565b60405180910390fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001541015610f3457600080fd5b34600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154610f829190611cb1565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555060005b60038054905081101561109e573373ffffffffffffffffffffffffffffffffffffffff166003828154811061100357611002611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff160361108b576003818154811061105d5761105c611aee565b5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690555b808061109690611b4c565b915050610fcb565b5050565b6611c37937e0800081565b6000606060007f0000000000000000000000000000000000000000000000000000000000000000600454426110e29190611cb1565b1190506000806003805490501190508180156110fb5750805b9350836040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250935093505050915091565b60006020528060005260406000206000915090505481565b60006003828154811061116d5761116c611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b478110611251576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161124890611ec3565b60405180910390fd5b6002600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002015460036112a29190611c6f565b6112ac9190611d14565b600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154826112fa9190611d45565b1061133a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161133190611f55565b60405180910390fd5b80600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600001600082825461138c9190611d45565b925050819055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060003373ffffffffffffffffffffffffffffffffffffffff168260405161141c90611bc5565b60006040518083038185875af1925050503d8060008114611459576040519150601f19603f3d011682016040523d82523d6000602084013e61145e565b606091505b50509050806114c55781600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000160008282546114b99190611cb1565b925050819055506114c6565b5b5050565b600281815481106114da57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006002828154811061151f5761151e611aee565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60405180606001604052806000815260200160008152602001600081525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b61159981611586565b81146115a457600080fd5b50565b6000813590506115b681611590565b92915050565b6000602082840312156115d2576115d161157c565b5b60006115e0848285016115a7565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611614826115e9565b9050919050565b61162481611609565b811461162f57600080fd5b50565b6000813590506116418161161b565b92915050565b60006020828403121561165d5761165c61157c565b5b600061166b84828501611632565b91505092915050565b61167d81611586565b82525050565b6060820160008201516116996000850182611674565b5060208201516116ac6020850182611674565b5060408201516116bf6040850182611674565b50505050565b60006060820190506116da6000830184611683565b92915050565b6116e981611586565b82525050565b600060608201905061170460008301866116e0565b61171160208301856116e0565b61171e60408301846116e0565b949350505050565b61172f81611609565b82525050565b600060208201905061174a6000830184611726565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f84011261177557611774611750565b5b8235905067ffffffffffffffff81111561179257611791611755565b5b6020830191508360018202830111156117ae576117ad61175a565b5b9250929050565b600080602083850312156117cc576117cb61157c565b5b600083013567ffffffffffffffff8111156117ea576117e9611581565b5b6117f68582860161175f565b92509250509250929050565b600060208201905061181760008301846116e0565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61186b82611822565b810181811067ffffffffffffffff8211171561188a57611889611833565b5b80604052505050565b600061189d611572565b90506118a98282611862565b919050565b600067ffffffffffffffff8211156118c9576118c8611833565b5b6118d282611822565b9050602081019050919050565b82818337600083830152505050565b60006119016118fc846118ae565b611893565b90508281526020810184848401111561191d5761191c61181d565b5b6119288482856118df565b509392505050565b600082601f83011261194557611944611750565b5b81356119558482602086016118ee565b91505092915050565b6000602082840312156119745761197361157c565b5b600082013567ffffffffffffffff81111561199257611991611581565b5b61199e84828501611930565b91505092915050565b60008115159050919050565b6119bc816119a7565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b838110156119fc5780820151818401526020810190506119e1565b60008484015250505050565b6000611a13826119c2565b611a1d81856119cd565b9350611a2d8185602086016119de565b611a3681611822565b840191505092915050565b6000604082019050611a5660008301856119b3565b8181036020830152611a688184611a08565b90509392505050565b600082825260208201905092915050565b7f636f6c6c61746572616c206e6565646564000000000000000000000000000000600082015250565b6000611ab8601183611a71565b9150611ac382611a82565b602082019050919050565b60006020820190508181036000830152611ae781611aab565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611b5782611586565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611b8957611b88611b1d565b5b600182019050919050565b600081905092915050565b50565b6000611baf600083611b94565b9150611bba82611b9f565b600082019050919050565b6000611bd082611ba2565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611c10600b83611a71565b9150611c1b82611bda565b602082019050919050565b60006020820190508181036000830152611c3f81611c03565b9050919050565b6000604082019050611c5b60008301856116e0565b611c6860208301846116e0565b9392505050565b6000611c7a82611586565b9150611c8583611586565b9250828202611c9381611586565b91508282048414831517611caa57611ca9611b1d565b5b5092915050565b6000611cbc82611586565b9150611cc783611586565b9250828203905081811115611cdf57611cde611b1d565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611d1f82611586565b9150611d2a83611586565b925082611d3a57611d39611ce5565b5b828204905092915050565b6000611d5082611586565b9150611d5b83611586565b9250828201905080821115611d7357611d72611b1d565b5b92915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000611daf601b83611a71565b9150611dba82611d79565b602082019050919050565b60006020820190508181036000830152611dde81611da2565b9050919050565b7f596f7520646f6e74206861766520616e797468696e6720746f20526570617900600082015250565b6000611e1b601f83611a71565b9150611e2682611de5565b602082019050919050565b60006020820190508181036000830152611e4a81611e0e565b9050919050565b7f436f6e747261637420446f6e7420686176652074686174206d756368206d6f6e60008201527f6579207269676874206e6f772100000000000000000000000000000000000000602082015250565b6000611ead602d83611a71565b9150611eb882611e51565b604082019050919050565b60006020820190508181036000830152611edc81611ea0565b9050919050565b7f596f75206e656564206d6f726520636f6c6c61746572616c20746f20626f727260008201527f6f77206d6f726500000000000000000000000000000000000000000000000000602082015250565b6000611f3f602783611a71565b9150611f4a82611ee3565b604082019050919050565b60006020820190508181036000830152611f6e81611f32565b905091905056fea2646970667358221220ef2c03bf116e998ba49cadea70c13a52fac73dfc0e8df7b6993df523304feed264736f6c63430008130033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 40,
        "contract": "contracts/Bank.sol:Bank",
        "label": "s_addressToAmountLended",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 45,
        "contract": "contracts/Bank.sol:Bank",
        "label": "s_addressToBorrower",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(Borrower)36_storage)"
      },
      {
        "astId": 48,
        "contract": "contracts/Bank.sol:Bank",
        "label": "s_lenders",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 51,
        "contract": "contracts/Bank.sol:Bank",
        "label": "s_borrowers",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 53,
        "contract": "contracts/Bank.sol:Bank",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(Borrower)36_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Bank.Borrower)",
        "numberOfBytes": "32",
        "value": "t_struct(Borrower)36_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Borrower)36_storage": {
        "encoding": "inplace",
        "label": "struct Bank.Borrower",
        "members": [
          {
            "astId": 31,
            "contract": "contracts/Bank.sol:Bank",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 33,
            "contract": "contracts/Bank.sol:Bank",
            "label": "timestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 35,
            "contract": "contracts/Bank.sol:Bank",
            "label": "collateral",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}